import json
import logging
import random
import time

from environs import Env
from pathlib import Path
from telegram import Bot, ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

from bot_logger import BotLogsHandler

logger = logging.getLogger(__file__)


def get_questions() -> dict[str:dict[str:str]]:
    quizzes_path = Path('quiz-questions/quizzes_parser')
    random_quizzes_file_path = random.choice([*quizzes_path.iterdir()])
    questions = json.loads(random_quizzes_file_path.read_text(encoding='UTF-8'))

    return questions

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        f'{update.effective_user.full_name}, –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã - —è –ë–æ—Ç –ë–æ—Ç—ã—á üòç \n–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?!',
        reply_markup=reply_markup,
    )


def send_echo_msg(update: Update, context: CallbackContext) -> None:
    if update.message.text == '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å':
        questions = get_questions()
        random_num = random.randrange(1, len(questions) + 1)
        question = questions[str(random_num)]['–í–æ–ø—Ä–æ—Å']

        update.message.reply_text(question, reply_markup=reply_markup)

    elif update.message.text == '–°–¥–∞—Ç—å—Å—è':
        update.message.reply_text('–¢–µ—Å—Ç - –°–¥–∞—Ç—å—Å—è', reply_markup=reply_markup)

    elif update.message.text == '–ú–æ–π —Å—á—ë—Ç':
        update.message.reply_text('–¢–µ—Å—Ç - –ú–æ–π —Å—á—ë—Ç', reply_markup=reply_markup)

    else:
        update.message.reply_text('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª üòî \n–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –Ω–∞ –∫–Ω–æ–ø–∫—É üëá', reply_markup=reply_markup)


def send_err(update: Update, context: CallbackContext) -> None:
    logger.error(msg='Exception during message processing:', exc_info=context.error)

    if update.effective_message:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. ' \
               '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.'
        update.effective_message.reply_text(text)


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(message)s')
    logger.setLevel(logging.DEBUG)

    env = Env()
    env.read_env()
    tg_token = env.str('TELEGRAM_BOT_TOKEN')
    admin_tg_token = env.str('TELEGRAM_ADMIN_BOT_TOKEN', '')
    admin_tg_chat_id = env.str('TELEGRAM_ADMIN_CHAT_ID', '')

    bot = Bot(tg_token)
    tg_bot_name = f'@{bot.get_me().username}'
    custom_keyboard = [['–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å', '–°–¥–∞—Ç—å—Å—è'],
                       ['–ú–æ–π —Å—á—ë—Ç']]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard)

    if not admin_tg_token:
        admin_tg_token = tg_token

    logger.addHandler(BotLogsHandler(
        bot_name=tg_bot_name,
        admin_tg_token=admin_tg_token,
        admin_tg_chat_id=admin_tg_chat_id,
    ))



    logger.info('Start Telegram bot.')

    while True:
        try:
            updater = Updater(tg_token)

            dispatcher = updater.dispatcher
            dispatcher.add_error_handler(send_err)
            dispatcher.add_handler(CommandHandler('start', start))
            dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, send_echo_msg))

            updater.start_polling()
            updater.idle()
        except Exception as error:
            logger.exception(error)
            time.sleep(60)
