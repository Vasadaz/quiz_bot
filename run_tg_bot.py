import json
import logging
import time

from functools import partial
from enum import Enum
from textwrap import dedent

import redis

from environs import Env
from telegram import Bot, ReplyKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    Updater,
)

import quizzes_parser

from bot_logger import BotLogsHandler


logger = logging.getLogger(__file__)


class Step(Enum):
    WAIT_ANSWER = 1
    WAIT_NEW_QUESTION = 2


def get_answer_notes(chat_id: int, db: redis.StrictRedis) -> (str, str):
    question_notes = json.loads(db.get(chat_id))
    correct_answer = question_notes['–û—Ç–≤–µ—Ç'].lower().strip(' .,:!\'"').replace('—ë', '–µ')
    answer_notes = '\n'.join(f'{key}: {value}' for key, value in question_notes.items() if key != '–í–æ–ø—Ä–æ—Å')

    return answer_notes, correct_answer


def get_keyboard(chat_id: int, step: Step) -> ReplyKeyboardMarkup:
    if step is Step.WAIT_ANSWER:
        return answer_keyboard
    else:
        return new_question_keyboard


def handle_answer(update: Update, context: CallbackContext, db: redis.StrictRedis) -> Step:

    step = Step.WAIT_ANSWER
    keyboard = answer_keyboard

    answer_notes, correct_answer = get_answer_notes(update.message.chat.id, db)
    user_answer = update.message.text.lower().strip(' .,:!\'"').replace('—ë', '–µ')

    if user_answer != correct_answer:
        answer = '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üòî\n–ü–æ–¥—É–º–∞–π –µ—â—ë ü§î'

    else:
        step = Step.WAIT_NEW_QUESTION
        keyboard = new_question_keyboard

        db.delete(update.message.chat.id)

        answer = dedent('''\
            –£—Ä–∞–∞–∞! –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤–µ—Ä–Ω–æ üëå
            ‚ûï1Ô∏è‚É£ –±–∞–ª–ª
            –í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å—É üëá

        ''') + answer_notes

    update.message.reply_text(dedent(answer), reply_markup=keyboard)

    return step


def handle_fallback(update: Update, context: CallbackContext) -> None:

    update.message.reply_text(
        '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª...\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá',
        reply_markup=get_keyboard(update.message.chat.id, Step.WAIT_NEW_QUESTION)
    )


def handle_loss(update: Update, context: CallbackContext, db: redis.StrictRedis) -> Step:
    answer_notes, _ = get_answer_notes(update.message.chat.id, db)

    answer = dedent('''
        –ë—ã–≤–∞–µ—Ç...
        –í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å—É üëá
        
    ''') + answer_notes

    update.message.reply_text(answer)
    update.message.reply_text('–õ–æ–≤–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å üëá')

    return handle_new_question(update, context)


def handle_my_score(update: Update, context: CallbackContext, step: Step, db: redis.StrictRedis) -> None:
    update.message.reply_text(f'–ú–æ–π —Å—á—ë—Ç', reply_markup=get_keyboard(update.message.chat.id, step))


def handle_new_question(update: Update, context: CallbackContext, db: redis.StrictRedis) -> Step:
    question_notes = quizzes_parser.get_random_question_notes()
    db.set(update.message.chat.id, json.dumps(question_notes))
    update.message.reply_text(question_notes['–í–æ–ø—Ä–æ—Å'], reply_markup=answer_keyboard)

    return Step.WAIT_ANSWER


def send_err(update: Update, context: CallbackContext) -> None:
    logger.error(msg='Exception during message processing:', exc_info=context.error)

    if update.effective_message:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. ' \
               '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.'
        update.effective_message.reply_text(text)


def start(update: Update, context: CallbackContext, db: redis.StrictRedis) -> Step:
    if db.get(update.message.chat.id):
        db.delete(update.message.chat.id)

    update.message.reply_text(
        dedent(f'''\
            {update.effective_user.full_name}, –±—É–¥–µ–º –∑–Ω–∞–∫–æ–º—ã - —è –ë–æ—Ç –ë–æ—Ç—ã—á üòç
            –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?!
        '''),
        reply_markup=new_question_keyboard,
    )

    return Step.WAIT_NEW_QUESTION


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s:%(levelname)s:%(message)s')
    logger.setLevel(logging.DEBUG)

    env = Env()
    env.read_env()
    tg_token = env.str('TELEGRAM_BOT_TOKEN')
    admin_tg_token = env.str('TELEGRAM_ADMIN_BOT_TOKEN')
    admin_tg_chat_id = env.str('TELEGRAM_ADMIN_CHAT_ID')
    db_host = env.str('REDIS_HOST')
    db_port = env.int('REDIS_PORT')
    db_password = env.str('REDIS_PASSWORD')

    bot = Bot(tg_token)
    tg_bot_name = f'@{bot.get_me().username}'

    logger.addHandler(BotLogsHandler(
        bot_name=tg_bot_name,
        admin_tg_token=admin_tg_token,
        admin_tg_chat_id=admin_tg_chat_id,
    ))

    new_question_keyboard = ReplyKeyboardMarkup([['–ú–æ–π —Å—á—ë—Ç', '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å']], resize_keyboard=True)
    answer_keyboard = ReplyKeyboardMarkup([['–ú–æ–π —Å—á—ë—Ç', '–°–¥–∞—Ç—å—Å—è']], resize_keyboard=True)

    db = redis.StrictRedis(
        host=db_host,
        port=db_port,
        password=db_password,
        charset='utf-8',
        decode_responses=True,
    )

    start = partial(start, db=db)
    handle_loss = partial(handle_loss, db=db)
    handle_my_score_answer = partial(handle_my_score, db=db, step=Step.WAIT_ANSWER)
    handle_my_score_new_question = partial(handle_my_score, db=db, step=Step.WAIT_NEW_QUESTION)
    handle_answer = partial(handle_answer, db=db)
    handle_new_question = partial(handle_new_question, db=db)

    logger.info('Start Telegram bot.')

    while True:
        try:
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler('start', start)],
                states={
                    Step.WAIT_ANSWER: [
                        MessageHandler(Filters.regex('–°–¥–∞—Ç—å—Å—è'), handle_loss),
                        MessageHandler(Filters.regex('–ú–æ–π —Å—á—ë—Ç'), handle_my_score_answer),
                        CommandHandler('start', start),
                        MessageHandler(Filters.text, handle_answer),
                    ],
                    Step.WAIT_NEW_QUESTION: [
                        MessageHandler(Filters.regex('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'), handle_new_question),
                        MessageHandler(Filters.regex('–ú–æ–π —Å—á—ë—Ç'), handle_my_score_new_question),
                        CommandHandler('start', start)
                    ],
                },
                fallbacks=[MessageHandler(Filters.all, handle_fallback)],
            )

            updater = Updater(tg_token)
            dispatcher = updater.dispatcher
            dispatcher.add_error_handler(send_err)
            dispatcher.add_handler(conv_handler)
            updater.start_polling()
            updater.idle()

        except Exception as error:
            logger.exception(error)
            time.sleep(60)
